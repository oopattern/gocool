// prepare: https://grpc.io/docs/languages/go/quickstart/
// # curl -LO $PB_REL/download/v3.13.0/protoc-3.13.0-linux-x86_64.zip
// # go get -u google.golang.org/protobuf/cmd/protoc-gen-go
// # go get -u google.golang.org/grpc/cmd/protoc-gen-go-grpc
// # go get -u github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger
// # go get -u github.com/grpc-ecosystem/grpc-gateway/protoc-gen-grpc-gateway
// # protoc -I . --go_out=. --go-grpc_out=. --grpc-gateway_out=logtostderr=true:. ./observe.proto
// # go test -v -run="TestBuildGrpcServer"

syntax = "proto3";
package observe;
option go_package = ".;proto";
// option go_package = "github.com/oopattern/gocool/proto";

import "google/api/annotations.proto";

// curl -X POST -H 'Content-Type: application/json' "http://localhost:8006/v1/observe" -d '{"name": "bar"}' -vvv
service Observe {
    rpc SayRoute(RouteReq) returns (RouteResp) {
        option(google.api.http) = {
            post: "/v1/observe"
            body: "*"
        };
    }
}

message RouteReq {
    string name = 1;
}

message RouteResp {
    string ip = 1;
    string port = 2;
}