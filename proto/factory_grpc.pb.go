// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// FactoryClient is the client API for Factory service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FactoryClient interface {
	CreateScheduler(ctx context.Context, in *ConfigReq, opts ...grpc.CallOption) (*SchedulerResp, error)
}

type factoryClient struct {
	cc grpc.ClientConnInterface
}

func NewFactoryClient(cc grpc.ClientConnInterface) FactoryClient {
	return &factoryClient{cc}
}

func (c *factoryClient) CreateScheduler(ctx context.Context, in *ConfigReq, opts ...grpc.CallOption) (*SchedulerResp, error) {
	out := new(SchedulerResp)
	err := c.cc.Invoke(ctx, "/factory.Factory/CreateScheduler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FactoryServer is the server API for Factory service.
// All implementations must embed UnimplementedFactoryServer
// for forward compatibility
type FactoryServer interface {
	CreateScheduler(context.Context, *ConfigReq) (*SchedulerResp, error)
	mustEmbedUnimplementedFactoryServer()
}

// UnimplementedFactoryServer must be embedded to have forward compatible implementations.
type UnimplementedFactoryServer struct {
}

func (UnimplementedFactoryServer) CreateScheduler(context.Context, *ConfigReq) (*SchedulerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateScheduler not implemented")
}
func (UnimplementedFactoryServer) mustEmbedUnimplementedFactoryServer() {}

// UnsafeFactoryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FactoryServer will
// result in compilation errors.
type UnsafeFactoryServer interface {
	mustEmbedUnimplementedFactoryServer()
}

func RegisterFactoryServer(s grpc.ServiceRegistrar, srv FactoryServer) {
	s.RegisterService(&_Factory_serviceDesc, srv)
}

func _Factory_CreateScheduler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FactoryServer).CreateScheduler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/factory.Factory/CreateScheduler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FactoryServer).CreateScheduler(ctx, req.(*ConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Factory_serviceDesc = grpc.ServiceDesc{
	ServiceName: "factory.Factory",
	HandlerType: (*FactoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateScheduler",
			Handler:    _Factory_CreateScheduler_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "factory.proto",
}
